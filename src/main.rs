
pub mod acpkm_kuznechik{
    fn fairm(a: u8, b: u8) -> u8{
        let power2: [u8; 256]= [ 1, 2, 4, 8, 16, 32, 64, 128, 195, 69, 138, 215, 109, 218, 119, 238,31, 62, 124, 248, 51, 102, 204, 91, 182, 175, 157, 249, 49, 98, 196, 75,150, 239, 29, 58, 116, 232, 19, 38, 76, 152, 243, 37, 74, 148, 235, 21,42, 84, 168, 147, 229, 9, 18, 36, 72, 144, 227, 5, 10, 20, 40, 80,160, 131, 197, 73, 146, 231, 13, 26, 52, 104, 208, 99, 198, 79, 158, 255,61, 122, 244, 43, 86, 172, 155, 245, 41, 82, 164, 139, 213, 105, 210, 103,206, 95, 190, 191, 189, 185, 177, 161, 129, 193, 65, 130, 199, 77, 154, 247,45, 90, 180, 171, 149, 233, 17, 34, 68, 136, 211, 101, 202, 87, 174, 159,253, 57, 114, 228, 11, 22, 44, 88, 176, 163, 133, 201, 81, 162, 135, 205,89, 178, 167, 141, 217, 113, 226, 7, 14, 28, 56, 112, 224, 3, 6, 12,24, 48, 96, 192, 67, 134, 207, 93, 186, 183, 173, 153, 241, 33, 66, 132,203, 85, 170, 151, 237, 25, 50, 100, 200, 83, 166, 143, 221, 121, 242, 39,78, 156, 251, 53, 106, 212, 107, 214, 111, 222, 127, 254, 63, 126, 252, 59,118, 236, 27, 54, 108, 216, 115, 230, 15, 30, 60, 120, 240, 35, 70, 140,219, 117, 234, 23, 46, 92, 184, 179, 165, 137, 209, 97, 194, 71, 142, 223,125, 250, 55, 110, 220, 123, 246, 47, 94, 188, 187, 181, 169, 145, 225, 1 ];
        let exponent: [u16; 256] = [ 0, 255, 1, 157, 2, 59, 158, 151, 3, 53, 60, 132, 159, 70, 152, 216,4, 118, 54, 38, 61, 47, 133, 227, 160, 181, 71, 210, 153, 34, 217, 16,5, 173, 119, 221, 55, 43, 39, 191, 62, 88, 48, 83, 134, 112, 228, 247,161, 28, 182, 20, 72, 195, 211, 242, 154, 129, 35, 207, 218, 80, 17, 204,6, 106, 174, 164, 120, 9, 222, 237, 56, 67, 44, 31, 40, 109, 192, 77,63, 140, 89, 185, 49, 177, 84, 125, 135, 144, 113, 23, 229, 167, 248, 97,162, 235, 29, 75, 183, 123, 21, 95, 73, 93, 196, 198, 212, 12, 243, 200,155, 149, 130, 214, 36, 225, 208, 14, 219, 189, 81, 245, 18, 240, 205, 202,7, 104, 107, 65, 175, 138, 165, 142, 121, 233, 10, 91, 223, 147, 238, 187,57, 253, 68, 51, 45, 116, 32, 179, 41, 171, 110, 86, 193, 26, 78, 127,64, 103, 141, 137, 90, 232, 186, 146, 50, 252, 178, 115, 85, 170, 126, 25,136, 102, 145, 231, 114, 251, 24, 169, 230, 101, 168, 250, 249, 100, 98, 99,163, 105, 236, 8, 30, 66, 76, 108, 184, 139, 124, 176, 22, 143, 96, 166,74, 234, 94, 122, 197, 92, 199, 11, 213, 148, 13, 224, 244, 188, 201, 239,156, 254, 150, 58, 131, 52, 215, 69, 37, 117, 226, 46, 209, 180, 15, 33,220, 172, 190, 42, 82, 87, 246, 111, 19, 27, 241, 194, 206, 128, 203, 79 ];
        if a == 0 || b == 0{
            return 0
        } else{
            let a_pow = exponent[a  as usize];
            let b_pow = exponent[b  as usize];
            let s: usize = ((a_pow + b_pow) % 255) as usize;
            return power2[s]
        }
    }
    // [[u8; 256]; 256]
    pub fn construct_field() -> Galois{
        let mut res: Vec<Vec<u8>> = Vec::with_capacity(256);
        for i in 0..=255{
            let mut b: Vec<u8> = Vec::with_capacity(256);
            for j in 0..=255{
                b.push(fairm(i, j));
            }
            res.push(b);
        }
        Galois{field: res}
    }

    pub struct Galois {
        pub field: Vec<Vec<u8>>
    }

    impl Galois{
        fn _m (&self, a: u8, b: u8) -> u8{
            self.field[a as usize][b as usize]
        }

    }
    fn _lsx(string: &Vec<u8>,key: &Vec<u8>, field: &Galois ) -> Vec<u8>{

        let pi: [u8; 256] = [252, 238, 221, 17, 207, 110, 49, 22, 251, 196, 250, 218, 35, 197, 4, 77, 233, 119, 240, 219, 147, 46, 153, 186, 23, 54, 241, 187, 20, 205, 95, 193, 249, 24, 101, 90, 226, 92, 239, 33, 129, 28, 60, 66, 139, 1, 142, 79, 5, 132, 2, 174, 227, 106, 143, 160, 6, 11, 237, 152, 127, 212, 211, 31, 235, 52, 44, 81, 234, 200, 72, 171, 242, 42, 104, 162, 253, 58, 206, 204, 181, 112, 14, 86, 8, 12, 118, 18, 191, 114, 19, 71, 156, 183, 93, 135, 21, 161, 150, 41, 16, 123, 154, 199, 243, 145, 120, 111, 157, 158, 178, 177, 50, 117, 25, 61, 255, 53, 138, 126, 109, 84, 198, 128, 195, 189, 13, 87, 223, 245, 36, 169, 62, 168, 67, 201, 215, 121, 214, 246, 124, 34, 185, 3, 224, 15, 236, 222, 122, 148, 176, 188, 220, 232, 40, 80, 78, 51, 10, 74, 167, 151, 96, 115, 30, 0, 98, 68, 26, 184, 56, 130, 100, 159, 38, 65, 173, 69, 70, 146, 39, 94, 85, 47, 140, 163, 165, 125, 105, 213, 149, 59, 7, 88, 179, 64, 134, 172, 29, 247, 48, 55, 107, 228, 136, 217, 231, 137, 225, 27, 131, 73, 76, 63, 248, 254, 141, 83, 170, 144, 202, 216, 133, 97, 32, 113, 103, 164, 45, 43, 9, 91, 203, 155, 37, 208, 190, 229, 108, 82, 89, 166, 116, 210, 230, 244, 180, 192, 209, 102, 175, 194, 57, 75, 99, 182];
        let l_const: [u8; 16] =  [1, 148, 32, 133, 16, 194, 192, 1, 251, 1, 192, 194, 16, 133, 32, 148];
        let mut l_material: Vec<u8> = {
            let mut sx: Vec<u8> = Vec::with_capacity(16);
            for i in 0..16{
                sx.push(pi[(string[i] ^ key[i]) as usize])
            }
            sx
        };
        for _ in 0..16{
            let mut c: u8 = 0;
            for (ind, n) in (&l_material[0..15]).iter().enumerate(){
                
                c =c ^ field._m(l_const[ind + 1], *n);
            }
            c = c ^ &l_material[15];
            l_material.rotate_right(1);
            l_material[0] = c;
        }
        l_material
    }
    fn _xdsdl(string: &Vec<u8>, key: &Vec<u8>, field: &Galois) -> Vec<u8>{
        let depi: [u8; 256] = [165, 45, 50, 143, 14, 48, 56, 192, 84, 230, 158, 57, 85, 126, 82, 145, 100, 3, 87, 90, 28, 96, 7, 24, 33, 114, 168, 209, 41, 198, 164, 63, 224, 39, 141, 12, 130, 234, 174, 180, 154, 99, 73, 229, 66, 228, 21, 183, 200, 6, 112, 157, 65, 117, 25, 201, 170, 252, 77, 191, 42, 115, 132, 213, 195, 175, 43, 134, 167, 177, 178, 91, 70, 211, 159, 253, 212, 15, 156, 47, 155, 67, 239, 217, 121, 182, 83, 127, 193, 240, 35, 231, 37, 94, 181, 30, 162, 223, 166, 254, 172, 34, 249, 226, 74, 188, 53, 202, 238, 120, 5, 107, 81, 225, 89, 163, 242, 113, 86, 17, 106, 137, 148, 101, 140, 187, 119, 60, 123, 40, 171, 210, 49, 222, 196, 95, 204, 207, 118, 44, 184, 216, 46, 54, 219, 105, 179, 20, 149, 190, 98, 161, 59, 22, 102, 233, 92, 108, 109, 173, 55, 97, 75, 185, 227, 186, 241, 160, 133, 131, 218, 71, 197, 176, 51, 250, 150, 111, 110, 194, 246, 80, 255, 93, 169, 142, 23, 27, 151, 125, 236, 88, 247, 31, 251, 124, 9, 13, 122, 103, 69, 135, 220, 232, 79, 29, 78, 4, 235, 248, 243, 62, 61, 189, 138, 136, 221, 205, 11, 19, 152, 2, 147, 128, 144, 208, 36, 52, 203, 237, 244, 206, 153, 16, 68, 64, 146, 58, 1, 38, 18, 26, 72, 104, 245, 129, 139, 199, 214, 32, 10, 8, 0, 76, 215, 116];
        let l_const: [u8; 16] =  [1, 148, 32, 133, 16, 194, 192, 1, 251, 1, 192, 194, 16, 133, 32, 148];
        let mut str_u8: Vec<u8> = string.clone();
        for _ in 0..16{
            let mut c: u8 = 0;
            for (ind, n) in (&str_u8[0..16]).iter().enumerate(){
                c =c ^ field._m(l_const[ind], *n);
            }
            str_u8.rotate_left(1);
            str_u8[15] = c;
        }
        

        let mut res: Vec<u8> = Vec::with_capacity(16);
        for i in 0..16{
            res.push((depi[str_u8[i] as usize]) ^ key[i])
        }

        
        res
     }

    fn sub_strings(string: &str) -> Vec<&str> {
        let mut subs = Vec::with_capacity(string.len() / 2);
        let mut iter = string.chars();
        let mut pos = 0;
    
        while pos < string.len() {
            let mut len = 0;
            for ch in iter.by_ref().take(2) {
                len += ch.len_utf8();
            }
            subs.push(&string[pos..pos + len]);
            pos += len;
        }
        subs
    }
    fn _vec2hex (vect: &Vec<u8>) -> String{
        let mut res: String = String::new();
        for value in vect{
            let c: String = format!("{:x}", value);
            match c.len() as u8 {
                1 => res.push_str(&('0'.to_string() + &c)),
                2 => res.push_str(&c),
                _ => panic!("What the fuck, we cant have higher than u8 numbers")
            }
        }
       res
    }
    fn _hex2vec (string: &String) -> Vec<u8>{
        let init: Vec<&str> = sub_strings(&string);
        let mut res: Vec<u8> = Vec::new();
        for value in init{
            res.push(u8::from_str_radix(value, 16).unwrap());
        }

        
        res
    }

    fn _x(s1: &Vec<u8>, s2: &Vec<u8>) -> Vec<u8>{
        let mut s3: Vec<u8> = Vec::with_capacity(16);
        for i in 0..=15{
            s3.push(s1[i] ^ s2[i])
        }
        s3
    }

    fn _feistel (string: &Vec<u8>, incrim: u8, field: &Galois) -> Vec<u8>{
        let iterconst: [[u8; 16]; 32] = [[110, 162, 118, 114, 108, 72, 122, 184, 93, 39, 189, 16, 221, 132, 148, 1], [220, 135, 236, 228, 216, 144, 244, 179, 186, 78, 185, 32, 121, 203, 235, 2], [178, 37, 154, 150, 180, 216, 142, 11, 231, 105, 4, 48, 164, 79, 127, 3], [123, 205, 27, 11, 115, 227, 43, 165, 183, 156, 177, 64, 242, 85, 21, 4], [21, 111, 109, 121, 31, 171, 81, 29, 234, 187, 12, 80, 47, 209, 129, 5], [167, 74, 247, 239, 171, 115, 223, 22, 13, 210, 8, 96, 139, 158, 254, 6], [201, 232, 129, 157, 199, 59, 165, 174, 80, 245, 181, 112, 86, 26, 106, 7], [246, 89, 54, 22, 230, 5, 86, 137, 173, 251, 161, 128, 39, 170, 42, 8], [152, 251, 64, 100, 138, 77, 44, 49, 240, 220, 28, 144, 250, 46, 190, 9], [42, 222, 218, 242, 62, 149, 162, 58, 23, 181, 24, 160, 94, 97, 193, 10], [68, 124, 172, 128, 82, 221, 216, 130, 74, 146, 165, 176, 131, 229, 85, 11], [141, 148, 45, 29, 149, 230, 125, 44, 26, 103, 16, 192, 213, 255, 63, 12], [227, 54, 91, 111, 249, 174, 7, 148, 71, 64, 173, 208, 8, 123, 171, 13], [81, 19, 193, 249, 77, 118, 137, 159, 160, 41, 169, 224, 172, 52, 212, 14], [63, 177, 183, 139, 33, 62, 243, 39, 253, 14, 20, 240, 113, 176, 64, 15], [47, 178, 108, 44, 15, 10, 172, 209, 153, 53, 129, 195, 78, 151, 84, 16], [65, 16, 26, 94, 99, 66, 214, 105, 196, 18, 60, 211, 147, 19, 192, 17], [243, 53, 128, 200, 215, 154, 88, 98, 35, 123, 56, 227, 55, 92, 191, 18], [157, 151, 246, 186, 187, 210, 34, 218, 126, 92, 133, 243, 234, 216, 43, 19], [84, 127, 119, 39, 124, 233, 135, 116, 46, 169, 48, 131, 188, 194, 65, 20], [58, 221, 1, 85, 16, 161, 253, 204, 115, 142, 141, 147, 97, 70, 213, 21], [136, 248, 155, 195, 164, 121, 115, 199, 148, 231, 137, 163, 197, 9, 170, 22], [230, 90, 237, 177, 200, 49, 9, 127, 201, 192, 52, 179, 24, 141, 62, 23], [217, 235, 90, 58, 233, 15, 250, 88, 52, 206, 32, 67, 105, 61, 126, 24], [183, 73, 44, 72, 133, 71, 128, 224, 105, 233, 157, 83, 180, 185, 234, 25], [5, 108, 182, 222, 49, 159, 14, 235, 142, 128, 153, 99, 16, 246, 149, 26], [107, 206, 192, 172, 93, 215, 116, 83, 211, 167, 36, 115, 205, 114, 1, 27], [162, 38, 65, 49, 154, 236, 209, 253, 131, 82, 145, 3, 155, 104, 107, 28], [204, 132, 55, 67, 246, 164, 171, 69, 222, 117, 44, 19, 70, 236, 255, 29], [126, 161, 173, 213, 66, 124, 37, 78, 57, 28, 40, 35, 226, 163, 128, 30], [16, 3, 219, 167, 46, 52, 95, 246, 100, 59, 149, 51, 63, 39, 20, 31], [94, 167, 216, 88, 30, 20, 155, 97, 241, 106, 193, 69, 156, 237, 168, 32]];
        let mut cpy: Vec<u8> = string.clone();
        for i in 0..=7{
            let mut left: Vec<u8> = (&cpy)[..16].to_vec();
            let right: Vec<u8> = ((&cpy)[16..]).to_vec();
            let mut leftorig: Vec<u8>= (&left).clone();
            left = _lsx(&left, &(iterconst[(i + incrim) as usize]).to_vec(), field);
            left = _x(&left, &right);
            left.append(&mut leftorig);
            cpy = left;
        }
        
        cpy
    }
    pub fn keygen(key: &String, field: &Galois) -> Vec<Vec<u8>> {
        let mut keys: Vec<Vec<u8>> = Vec::with_capacity(10);
        let mut incrim: u8 = 0;
        let mut localkey: String = key.clone();
        keys.push(_hex2vec(&localkey[..&localkey.len()/2].to_string()));
        keys.push(_hex2vec(&localkey[&localkey.len()/2..].to_string()));

        for _ in 0..4{
            localkey = _vec2hex(&_feistel(&_hex2vec(&localkey), incrim, field));
            
            keys.push(_hex2vec(&localkey[..&localkey.len()/2].to_string()));
            keys.push(_hex2vec(&localkey[&localkey.len()/2..].to_string()));
            incrim += 8;
        }
        keys
    }
    pub fn cipher(block: &String, keys: &Vec<Vec<u8>>, field: &Galois ) -> String{
        let mut ciphertext: Vec<u8> = _hex2vec(&block);
        for i in 0..=8{
            ciphertext = _lsx(&ciphertext, &keys[i] ,field)
        }
        _vec2hex(&_x(&ciphertext, &keys[9]))
    }

    pub fn decipher(block: &String, keys: &Vec<Vec<u8>>, field: &Galois ) -> String{
        let mut ciphertext: Vec<u8> = _hex2vec(block);
        ciphertext = _x(&ciphertext, &keys[9]);
        for i in 1..=9{
            ciphertext = _xdsdl(&ciphertext, &keys[i] ,field)
        }
        _vec2hex(&ciphertext)
    }
}


fn main() {
    //let g: acpkm_kuznechik::Galois = acpkm_kuznechik::construct_field();
    //let keys = acpkm_kuznechik::keygen(&"019484dd10bd275db87a486c7276a26edc87ece4d890f4b3ba4eb92079cbeb02".to_string(), &g);
    //acpkm_kuznechik::decipher(&acpkm_kuznechik::cipher(&"dc87ece4d890f4b3ba4eb92079cbeb02".to_string(), &keys, &g), &keys, &g);
    
}
